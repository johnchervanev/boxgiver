- content_for :javascript do
  initialize_homepage();

- content_for :coverfade_class do
  = "without-text"

- content_for :extra_javascript do
  - # maps.google can't be loaded twice
  - maps_key = MarketplaceHelper.google_maps_key(@current_community.id)
  - key_param = maps_key ? "&key=#{maps_key}" : ""
  - # Topbar adds its own maps script, otherwise add it if location search enabled or map is visible
  - needs_maps = !FeatureFlagHelper.feature_enabled?(:topbar_v1) && (main_search != :keyword || @view_type.eql?("map"))
  - if(needs_maps)
    = javascript_include_tag "//maps.googleapis.com/maps/api/js?libraries=places#{key_param}"
  - if(@view_type.eql?("map"))
    = javascript_include_tag "markerclusterer.js"

- content_for :title_header do
  - is_homepage = params[:controller] == "homepage" && params[:action] == "index"
  - if @big_cover_photo
    - if @current_community.show_slogan?
      %h1.marketplace-lander-content-title= community_slogan.html_safe
    - else
      %h1.marketplace-lander-content-title.hidden_title_part &nbsp;
    - if @current_community.show_description?
      %p.marketplace-lander-content-description= community_description.html_safe
    - else
      %p.marketplace-lander-content-description.hidden-title-part &nbsp;
    - unless (is_homepage && !@current_community.private? && FeatureFlagHelper.feature_enabled?(:topbar_v1))
      .search-form
        - if @current_community.private?
          %a.inline-big-button{href: sign_up_path}
            .content
              = t("layouts.application.connect")
        - else
          - if(main_search == :location)
            = render partial: "location_bar"
          - else
            = render partial: "search_bar"
  - elsif !(is_homepage && FeatureFlagHelper.feature_enabled?(:topbar_v1))
    .browse-view-search-form
      - if(main_search == :location)
        = render partial: "location_bar"
      - else
        = render partial: "search_bar"

- content_for(:head) do
  - if seo_pagination_links[:prev].present?
    %link{rel: "prev", href: seo_pagination_links[:prev]}
  - if seo_pagination_links[:next].present?
    %link{rel: "next", href: seo_pagination_links[:next]}

- if @current_community.private? && @big_cover_photo
  - if @community_customization && @community_customization.private_community_homepage_content
    .community-customization-wrapper
      = @community_customization.private_community_homepage_content.html_safe
  - else
    = t(".this_is_private_community")

- else
  / =======Toolbar==========
  .custom-toolbar
    #home-toolbar-filters.custom-all-category
      .toggle.button#home_toolbar-select-share-type{data: {toggle: '.home-toolbar-share-type-menu'}}
        .toggle-header
          %span.hide-phone
            Category
          = image_tag 'category.png', class: 'icon_img'
        = icon_tag("dropdown", ["icon-dropdown"])
      .home-toolbar-share-type-menu.toggle-menu.hidden
        - if @category_menu_enabled
          - if @show_categories
            = link_to t("homepage.filters.all_categories"), search_path(search_params.merge({category: "all"})), :class => "home-categories-main #{if selected_category.nil? then 'selected' end}"
            - @main_categories.each do |category|
              - show_subcategories = show_subcategory_list(category, Maybe(selected_category).id.to_i.or_else(nil))
              = link_to "#{@category_display_names[category.id]}", search_path(search_params.merge({category: category})), :class => "home-categories-main #{if show_subcategories then 'selected' end} #{if category.has_subcategories? then 'has-subcategories' end}", :data => {category: category.id}
              - if category.children
                - if show_subcategories
                  - category.children.each do |child|
                    - is_selected = selected_category == child
                    = link_to @category_display_names[child.id], search_path(search_params.merge({category: child})), :class => "home-categories-sub #{if is_selected then 'selected' end}", :data => {:"sub-category" =>child.id}
        / .show-sm-device
        /   = link_to search_path(transaction_type: 'giving-away'), :class => "home-categories-main" do
        /     = t(".give")
        /   = link_to search_path(transaction_type: 'requested'), :class => "home-categories-main" do
        /     = t(".request")
        /   = link_to search_path(transaction_type: 'for-sale'), :class => "home-categories-main" do
        /     = t(".sell")

    = link_to search_path(transaction_type: 'giving-away'), :class => "button sm-device-hid give-btn #{ if params[:transaction_type].eql?('giving-away') then 'active-order-type' end }" do
      = t(".give")
    = link_to search_path(transaction_type: 'requested'), :class => "button sm-device-hid request-btn #{ if params[:transaction_type].eql?('requested') then 'active-order-type' end }" do
      = t(".request")
    = link_to search_path(transaction_type: 'for-sale'), :class => "button sm-device-hid sell-btn #{ if params[:transaction_type].eql?('for-sale') then 'active-order-type' end }" do
      = t(".sell")

    .custom-filterbar
      = image_tag "filter.png"
    .right-toolbar-content
      %span.map-text
        Map
      %label#switchBtn.switch
        %a.map-view-active{:href => "/s?view=#{ params[:view].eql?('map') ? 'grid' : 'map'}"}
        - if params[:view].eql?('map')
          %input{:type => "checkbox", :checked => "checked" }
        - else
          %input{:type => "checkbox" }
        %span.slider.round
          %span.on
            &#10003;
          %span.off
            &#10005;

      .sort-by
        =# t(".sort_by")
        = select_tag 'sort', options_for_select([['Newest', 'created_at'], ['Closest', 'distance'], ['Popular', 'most_review']], selected: params[:sort]), id: 'sort_filter', prompt: '-- Sort by --'


  .row
    -# NOT IN USE
      - if @category_menu_enabled

        #desktop-filters
          - # Filters will be relocated here when in desktop
        = render 'homepage/sidebar_ad'

    - main_container_class = if @category_menu_enabled then "col-12 listing-container" else "col-12" end
    %div{:class => main_container_class}
      - if @listings.total_entries > 0
        - if @view_type.eql?("map")
          .home-map
            - locations = listings_for_map(@listings)
            = render :partial => "map", locals: { viewport: viewport, lstings: locations }
        - else
          - if @view_type.eql?("grid")
            %div{class: @category_menu_enabled ? "home-fluid-thumbnail-grid-narrow" : "home-fluid-thumbnail-grid-wide"}
              .home-fluid-thumbnail-grid
                - @listings.each_with_index do |listing, index|
                  - if index == 4
                    = render partial: "homepage/ad_grid"
                  = render partial: "homepage/custom_grid", locals: { listing: listing, show_distance: location_search_in_use }
          - else
            .home-listings
              - if (location_search_in_use)
                = render partial: "list_item_with_distance", collection: @listings, as: :listing, locals: { shape_name_map: shape_name_map, show_distance: location_search_in_use }
              - else
                =# render partial: "list_item", collection: @listings, as: :listing, locals: { shape_name_map: shape_name_map }
          .home-loading-more
            = will_paginate(@listings)
            -# - item_container = if @view_type.eql?("grid") then '.home-fluid-thumbnail-grid' else '.home-listings' end
            -# = pageless(@listings.total_pages, item_container, current_search_path_without_page, t('.loading_more_content'), current_page)
      - else
        .home-no-listings
          - if params[:q] || params[:category] || params[:share_type] # Some filter in use
            = t(".no_listings_with_your_search_criteria")
          - else
            = t(".no_listings_notification",
                  add_listing_link: link_to(t(".add_listing_link_text"),
                  new_listing_path(ref: "add_listing_link"))).html_safe
  .filter-popup
    .popup-content.animated
      .popup-head
        %span
          Filters
        %span.close.clone-pop
          = image_tag 'close.svg'
      .popup-body
        #filters
          .btn-group-mobile
            = link_to search_path(transaction_type: 'giving-away'), :class => "button give-btn #{ if params[:transaction_type].eql?('giving-away') then 'active-order-type' end }" do
              = t(".give")
            = link_to search_path(transaction_type: 'requested'), :class => "button request-btn #{ if params[:transaction_type].eql?('requested') then 'active-order-type' end }" do
              = t(".request")
            = link_to search_path(transaction_type: 'for-sale'), :class => "button sell-btn #{ if params[:transaction_type].eql?('for-sale') then 'active-order-type' end }" do
              = t(".sell")
          = render :partial => "filters", :locals => { show_price_filter: show_price_filter, show_custom_fields: @show_custom_fields, filters: filters }

- content_for :extra_javascript do
  :javascript
    $("#sort_filter").on('change', function(){
      $("#homepage-filters").submit();
    });

    let filterBtn = document.querySelector('.custom-filterbar');
    let filterPop = document.querySelector('.filter-popup');
    let popupContent = document.querySelector('.popup-content');
    let clonepopBtn = document.querySelectorAll('.clone-pop');
    filterBtn.addEventListener('click', ()=> {
      popupContent.classList.remove('bounceOutUp');
      popupContent.classList.add('bounceInDown');
      filterPop.classList.add('show');
      document.body.style.overflow="hidden";
    })

    clonepopBtn.forEach(el=>{
      el.addEventListener('click', ()=>{
        popupContent.classList.remove('bounceInDown');
        popupContent.classList.add('bounceOutUp');
        setTimeout(()=>{
          filterPop.classList.remove('show');
        },800);
        document.body.style.overflow="unset";
      })
    })


